# 任务情况
## 昨日进度
1. 了解了ONNX的内存具体分配情况，文件结构，以及如何具体修改某一层的参数，结点
2. 输出了TFLITE的信息，了解了TFLITE的Subgraph是一个完整的网络图，而ONNX的NODE是一层，且具体模型中，每一层的结构不完全一样
3. 了解了卷积的运算原理以及ONNX 和TFLITE 两种模型的卷积运算不同点

## 今日任务
1. 深入了解TFLITE模型的内存分配情况，
2. Yolo11



# TFLITE 

## 文件结构
	TensorFlow Lite（TFLite）模型文件的结构基于 ​FlatBuffers​（一种高效的序列化库）
	无需解析即可直接访问数据（直接通过内存偏移量）（ONNX每个字段都有特定的tag和类型，然后是数据）
	
## 文件内存情况
	Buffers 是 FlatBuffers 格式中存储模型二进制数据的核心组件。它们的主要作用是为模型中的 ​权重（weights）​、偏置（bias）​、量化参数 和其他 ​常量数据 提供存储空间
	TFLite首先会根据每个张量的大小(size)，为它们分配一个偏移地址(offset)，并且保证不会有任何一个张量的数据在错误的时间覆盖任何其他有用的张量
	# flatc -t --raw-binary schema.fbs -- /home/yang/Model_File/PixtalksModel/t2d_fd/fd_v1_22_20230802/fd_v1_22_20230802_quantize.tflite

--- 

# TFLite 模型结构示例(数据来源)
Model
└── Subgraph
    └── Tensors
        ├── Tensor1 → Buffer[3] (权重)
        ├── Tensor2 → Buffer[4] (偏置)
        └── Tensor3 → Buffer[0] (动态数据)
        
---


## 具体模型内容
	INT8 存储 + ​INT32 计算
	
# Yolo 11
	改进的骨干和颈部架构，增强了特征提取能力，提高了物体检测的精确度和复杂任务的表现
	https://blog.csdn.net/qq_64693987/article/details/142668985
## 技术改进
compared to Yolov8
	将CF2模块改成C3K2
	在SPPF模块后面添加了一个C2PSA模块
	将YOLOv10的head思想引入到YOLO11的head中

### C3k2网络结构
	C2F模块转变过来，当c3k这个参数为FALSE的时候，C3K2模块就是C2F模块
	
###  C2PSA的网络结构
	对 C2f 模块的扩展，它结合了PSA(Pointwise Spatial Attention)块，用于增强特征提取和注意力机制
	实现了一个带有注意力机制的卷积块

### 损失函数
	2 个分支： 分类和回归分支，没有了之前的 objectness 分支。
	分类分支依然采用 BCE Loss。回归分支使用了 Distribution Focal Loss（DFL Reg_max默认为16）+ CIoU Loss。3 个 Loss 采用一定权重比例加权即可
	
	

# 训练

## 训练流程
1. 进行物体检测（检测出框的同时会有一个简单的2分类  +活体判断
2. 定点（人物五官5个点 两个眼睛+鼻子+嘴巴两侧）（手有六个点，五个手指根部+手掌根部）
3. 特征提取
4. 活体检测，判断是不是真人

